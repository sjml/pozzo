Make a simple little Python test script that runs requests against the backend.
Have it test looking for every possible return code from the endpoints.

âœ… -- check written and currently passing

backend functionality tests
    âœ… setup site (create user)
    âœ… cannot setup site again
    âœ… can't log in without credentials
    âœ… can't log in with wrong credentials
    âœ… can log in with right credentials
    âœ… login check serves new usable token
    âœ… can't upload without credentials
    âœ… can upload with credentials
    âœ… cannot upload incorrect file type
    âœ… cannot upload incorrect image type
    âœ… upload 10 pictures, verify hashes
    âœ… verify that all declared sizes exist for all images
    âœ… download original image and confirm it has same hash as upload
    âœ… all uploads should be in unsorted
    âœ… create new album
    âœ… move 5 pictures to that album
    âœ… create another new album (set to private)
    âœ… credentialed user can see album
    âœ… non-credentialed cannot
    âœ… non-credentialed cannot edit album metadata
    âœ… credentialed can edit album metadata
    âœ… reorder images in album
    âœ… reorder album list
    âœ… non-credentialed cannot delete album
    âœ… credentialed can delete album
    delete individual image
        - no longer in album
        - upload image, should go at end rather than in the gap
    delete album + images
        - images are gone
    once exif import has been revised, check stored column data for images and make sure it matches expectations

found by code coverage:
    - need images in corpus that:
        - will generate an "ad" in their hash ðŸ˜‘
        - have different orientations
        - in the southern hemisphere
    - try to make a user with a duplicate name
    - login validation should check that the user in the token exists
    - try logging in as user that doesn't exist: should hit null return in GetUser
    - get all photos
    - upload photos in an order
    - removing cover photo from album
    - view album by slug
    - copy photos to album by slug
    - edit non-existent album
    - pass bad parameters to metadata (non-numeric index, etc)
    - reorder without passing ordering
    - reorder non-existent album
    - reorder list without passing ordering
    - download non-existent original

perf/size
    don't let import time of realistic-sized album rise above X
    don't let lighthouse score of realistic-sized album drop below 90
    don't let javascript bundle size rise above X
